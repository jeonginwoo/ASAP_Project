from jamo import h2j, j2hcj

#ㄱ,ㄴ,ㄷ
word_a = ['가격','갈릭불고기와퍼','갑각류알레르기','강판치즈','계란알레르기','구운갈릭시즈닝','나트륨','너겟킹','단백질','달걀알레르기','닭',
          '당','더블비프불고기버거','더블오리지날치즈버거','돼지고기알레르기','돼지알레르기','디아블로', '너겟','디아블로소스','디아블로소스',
          '디저트','드링크','고기','두개','두','둘','네개','넷','네','다섯개','다섯','단백질','나트륨','그람','그램','들었','감사합니다','고마워','감사',
          '끼니','높은','낮은','많은','갑각류','돼지','돼지고기','높']
#ㄹ,ㅁ
word_b = ['레드애플맛제로','레몬라임맛제로','롱치킨','롱치킨버거','마늘','마늘칩','마요','마요네즈','마요네즈소스','망고선데',
          '망고선데이','매운','매운토마토','매운토마토소스','매콤치즈시즈닝','맵기','머스타드','머스타드소스','모짜렐라치즈',
          '몬스터X', '릴리트','망고','모짜볼','몬스터엑스','몬스터와퍼','미네랄워터','미닛메이드오렌지비프알레르기','모짜','밀크',
          
          '몇','맛','맛있는','메뉴','물','콜라','코카콜라','뭐가'#추가
     ]



#ㅂ
word_c = ['바베큐','바베큐소스','바비큐치킨버거', '바삭킹','버거','베이컨','베이컨잼','베이컨잼소스','불고기','불고기소스',
     '불고기와퍼','불고기와퍼주니어', '블랙바비큐와퍼','블랙바비큐와퍼','블랙바비큐콰트로치즈와퍼','비프','비프불고기버거','볼'
     '비프슈림프버거','비프앤슈림프버거', '비프앤슈림프버거','버거','배고파','배고픈']

#ㅅ
word_d = ['사이드','상세정보','새우','새우알레르기','설탕','소고기','소고기알레르기','소알레르기','순수','쉐이킹프라이','소스',
     '쉬림프','슈레드치즈','슈레디드치즈','슈림프','슈림프버거','슈림프버거','스윗어니언시즈닝','스테이크','스프라이트','슈프림',
     '스프라이트제로','슬라이스치즈','샐러드','슬로','선데','선데이','성분','상세','소','쉐이킹','슈레디드','슈레드','세개','세','셋',
     '슬라이스','슈레디드'
     ]
#ㅇ,ㅈ
word_e = ['아메리카노','아이스아메리카노','아이스','아이스초코','아이스크림','안맵','알러지','알레르기','알레르기','양상추','양파',
     '어니언링','열량','영양성분','영양소','오징어알레르기','와퍼','와퍼주니어','우유알레르기','음료수','정보', '이나리우스','우유',
     '조개알레르기','와퍼주니어','주니어','어니언','영양','오징어','여섯개','여섯','육','일곱개','일곱','여덣개','여덣','아홉개',
     '아홉','열개','열','주세요','요',
     '얼마나','열량','정보','아침','점심','저녁','음식','워터','적은','조개','줘'#추가
     ]
#ㅊ
word_f = ['초코망고선데', '치즈','치킨', '치즈소스', '치즈스틱', '치즈와퍼', '치즈와퍼주니어', '치즈프라이', '치즈프라이',
     '치킨', '치킨버거', '치킨버거', '치킨알레르기', '치킨와퍼', '치킨킹', '치킨킹BLT','초코','추천'] 
#ㅋ
word_g = ['카페인', '칼로리', '컵망고아이스크림','컵망고아이스크림', '케찹', '케찹소스', '코울슬로', '코카콜라', '컵','크리미','코코넛',
        '코카콜라제로', '코코넛슈림프', '콘샐러드','콰트로치즈와퍼', '콰트로치즈와퍼주니어', '크리미모짜볼','킹','콰트로','콰트로치즈',
        '코울','크림','카페인',
        '콜라','코카콜라'#추가
        ]
#ㅌ,ㅍ
word_h = ['타르타르', '타르타르소스', '토마토', '토마토알레르기', '통새우', '통새우슈림프버거','통','탄수화물'
     '통새우와퍼', '통새우와퍼주니어','포화지방', '프렌치프라이', '피클','프렌치','프라이','지방','포화',
     '팹시',#추가
     ]
#ㅎ
word_i = ['할라피뇨', '핫초코', '해쉬브라운', '햄버거', '헬로디아블로와퍼', '헬로디아블로와퍼', '해쉬','핫','하나','한개','한'
     '헬로릴리트와퍼', '헬로릴리트와퍼', '헬로이나리우스와퍼', '헬로이나리우스와퍼', '헬로이나리우스와퍼','헬로','함량']


#######ㅇㅇㅇㅇㅇㅇㅇ

word_1 = ['닭', '당', '두', '둘', '넷', '네', '몇', '소', '세', '셋', '육', '열', '요', '컵', '킹', '통', '핫']

word_2 = ['가격','갈릭','더블', '고기', '두개', '네개', '다섯', '그람', '그램', '들었', '감사', '마늘', '마요', '매운', '맵기', '망고', '모짜',
      '밀크', '버거', '비프', '버거', '새우', '설탕', '순수', '소스', '슬로', '선데', '성분', '상세', '세개', '안맵', '양파', 
      '열량', '와퍼', '정보', '우유', '영양', '여섯', '일곱', '여덟', '아홉', '열개', '열량', '치즈', '치킨', '초코', '케찹',
        '코울', '크림', '피클', '지방', '포화', '해쉬', '하나', '한개', '헬로', '함량']

word_3 = ['나트륨', '너겟킹', '단백질', '디저트', '드링크', '다섯개', '단백질', '나트륨', '고마워', '롱치킨', '마늘칩', '릴리트', 
     '모짜볼', '바베큐', '바삭킹', '베이컨', '불고기', '사이드', '소고기', '쉬림프', '슈림프', '슈프림', '샐러드', '선데이',
       '쉐이킹', '슈레드', '아이스', '알러지', '양상추', '영양소', '음료수', '주니어', '어니언', '오징어', '여섯개', '일곱개',
         '여덟개', '아홉개', '주세요', '얼마나', '치킨킹', '카페인', '칼로리', '크리미', '코코넛', '콰트로', '카페인', '토마토',
           '통새우', '프렌치', '프라이', '핫초코', '햄버거']

word_4 = ['강판치즈', '디아블로', '마요네즈', '망고선데', '머스타드', '몬스터X', '베이컨잼', '상세정보', '스테이크', '슈레디드', '알레르기',
      '알레르기', '어니언링', '영양성분', '치즈소스', '치즈스틱', '치즈와퍼', '치킨버거', '치킨버거', '치킨와퍼', '케찹소스', '코울슬로',
        '코카콜라', '콘샐러드', '타르타르', '포화지방', '할라피뇨']

word_5 = ['감사합니다', '롱치킨버거', '망고선데이', '매운토마토', '몬스터엑스', '몬스터와퍼', '미네랄워터', '바베큐소스', '불고기소스',
      '불고기와퍼', '소알레르기', '슈레드치즈', '슈림프버거', '슈림프버거', '스프라이트', '아메리카노', '아이스초코', '아이스크림',
        '와퍼주니어', '이나리우스', '와퍼주니어', '치즈프라이', '치즈프라이', '콰트로치즈', '해쉬브라운']

word_6 = ['계란알레르기', '달걀알레르기', '돼지알레르기', '디아블로소스', '마요네즈소스', '머스타드소스', '모짜렐라치즈', '베이컨잼소스',
      '새우알레르기', '쉐이킹프라이', '슈레디드치즈', '슬라이스치즈', '우유알레르기', '조개알레르기', '초코망고선데', '치킨알레르기',
        '치킨킹BLT', '코카콜라제로', '코코넛슈림프', '크리미모짜볼', '타르타르소스', '프렌치프라이']

word_7 = ['갈릭불고기와퍼', '갑각류알레르기', '구운갈릭시즈닝', '레드애플맛제로', '레몬라임맛제로', '매운토마토소스', '매콤치즈시즈닝',
      '바비큐치킨버거', '블랙바비큐와퍼', '블랙바비큐와퍼', '비프불고기버거', '소고기알레르기', '스프라이트제로', '오징어알레르기',
        '치즈와퍼주니어', '콰트로치즈와퍼', '토마토알레르기', '헬로릴리트와퍼']

word_8= ['불고기와퍼주니어', '볼비프슈림프버거', '비프앤슈림프버거', '비프앤슈림프버거', '스윗어니언시즈닝', '아이스아메리카노',
      '컵망고아이스크림', '컵망고아이스크림', '통새우슈림프버거', '통새우와퍼주니어', '헬로디아블로와퍼', '헬로디아블로와퍼',
        '한헬로릴리트와퍼', '돼지고기알레르기']

word_9 =['탄수화물통새우와퍼', '헬로이나리우스와퍼', '헬로이나리우스와퍼', '헬로이나리우스와퍼', '더블비프불고기버거']

word_10=['미닛메이드오렌지비프알레르기', '블랙바비큐콰트로치즈와퍼', '콰트로치즈와퍼주니어', '더블오리지날치즈버거']


class Leven():
    def __init__(self,text):
        self.list = []
        self.text = text.split(' ')
        self.stop_words = '은 는 이 가 에 에는 을 를 에서 으로 의 에게 께 에게 과 와 에는 해줘'
        self.stop_words = set(self.stop_words.split(' '))

    def start_leven(self):
        result = ''
        
        for i in self.text:
            i_2 = ''
            if len(i)>=2 and i[-2]+i[-1] in self.stop_words:#불용어제거
                i_2 = i[-2]+i[-1]
                i = i[:-2]
            elif i[-1] in self.stop_words:
                i_2 = i[-1]
                i = i[:-1]
            self.select_List(i)
            result+=self.change_word(i)+i_2+' '
        return result
    
    def chosung(self,ttt):
        jamo_str = j2hcj(h2j(ttt)) 
        return ord(jamo_str[0])#초성 걸러내기

    def select_List(self,ttt):

        #첫 초성 기준 단어 리스트 접근
        first_chosung = self.chosung(ttt)
        
        if first_chosung>=ord('ㄱ') and first_chosung<ord('ㄹ'): #ㄱ,ㄴ,ㄷ
            self.list = word_a
        elif ord('ㄹ')<=first_chosung and first_chosung<ord('ㅂ'):#ㄹ,ㅁ 
            self.list = word_b
        elif ord('ㅂ')<=first_chosung and first_chosung<ord('ㅅ'):#ㅂ
            self.list = word_c
        elif ord('ㅅ')<=first_chosung and first_chosung<ord('ㅇ'):#ㅅ
            self.list = word_d
        elif ord('ㅇ')<=first_chosung and first_chosung<ord('ㅊ'):#ㅇ,ㅈ,ㅊ,ㅌ
            self.list = word_e
        elif ord('ㅊ')<=first_chosung and first_chosung<ord('ㅋ'):#ㅊ
            self.list = word_f
        elif ord('ㅋ')<=first_chosung and first_chosung<ord('ㅌ'):#ㅋ
            self.list = word_g
        elif ord('ㅌ')<=first_chosung and first_chosung<ord('ㅎ'):#ㅌ,ㅍ
            self.list = word_h
        else: #ㅎ
            self.list = word_i
        ''' 
        #글자수 기준 단어 리스트 접근
        if len(ttt)<10: 
            word_list = {1:word_1, 2:word_2, 3:word_3, 4:word_4, 5:word_5, 6:word_6, 7:word_7, 8:word_8, 9:word_9}#,10:word_10}
            self.list = word_list[len(ttt)]
        else:
            self.list = word_10
            ''' 
        #둘중에서 분류 기준 주석처리를 통해 선택
        
    def change_word(self,ttt):#단어 변경
        n = len(self.list)
        temp = ttt
        min_l = 1000000
        r = ttt
        #print(self.list)
        #print(ttt)

        for i in range(n):
            
            if min_l > self.leven(temp,self.list[i]) and self.leven(temp, self.list[i])<5:
                min_l = self.leven(temp,self.list[i])
                r = self.list[i]

        return r

    def getJamoList(self,word):
        cho = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']
        jung = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ']
        jong = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ']

        jamoList = []
        for syllable in word:
            syllable_code = ord(syllable)
            if syllable_code == 32:
                jamoList.append(' ')
            elif syllable_code<=12622:
                jamoList.append(syllable)
            else:
                syllable_code = ord(syllable) # 유니코드
                choIDX = int((syllable_code-44032)/588)
                jungIDX = int((syllable_code-44032-(choIDX*588))/28)
                jongIDX = int(syllable_code-44032-(choIDX*588)-(jungIDX*28))

                jamoList.append(cho[choIDX])
                jamoList.append(jung[jungIDX])
                if jongIDX !=0 :
                    jamoList.append(jong[jongIDX])
        return jamoList

    def leven(self,aText, bText):
        w1 = self.getJamoList(aText)
        w2 = self.getJamoList(bText)
        # dp 행 개수 = w1의 길이 + blank, 열 개수 = w2의 길이 + blank
        dp=[[0 for _ in range(len(w2)+1)] for _ in range(len(w1)+1)]

        for i in range(len(w1)+1):
            for j in range(len(w2)+1):
                if i==0:
                    dp[i][j] = j
                elif j==0:
                    dp[i][j] = i 
                elif w1[i-1]==w2[j-1]:
                    dp[i][j]=dp[i-1][j-1]
                else: # minimum edit distance [1,1,1] / levenshtein edit distance [1,2,1]
                    dp[i][j]=min(dp[i-1][j]+1, dp[i-1][j-1]+2, dp[i][j-1]+1)
        return dp[i][j]
